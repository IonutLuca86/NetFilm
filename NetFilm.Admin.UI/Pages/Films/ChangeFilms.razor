
@inject IAdminService AdminService



<div class="d-xl-flex justify-content-center">
    @if(Page.Equals(PageType.Create) || Page.Equals(PageType.Delete) || Page.Equals(PageType.Edit))
    {
    <EditForm Model="@Model" OnValidSubmit="@OnFormSubmit" class="mb-5 border border-1 border-secondary p-2 w-25">
        <DataAnnotationsValidator />
        <h4>@Page Films</h4>
        <div class="mb-3">
            @if (Page.Equals(PageType.Delete))
            {
                <InputText id="title" class="form-control me-2" @bind-Value="Model.Title" disabled placeholder="Title"></InputText>
            }
            else
            {
                <InputText id="title" class="form-control me-2" @bind-Value="Model.Title" placeholder="Title"></InputText>
            }
            <ValidationMessage For="@(() => Model.Title)" />
        </div>
        @if (!Page.Equals(PageType.Delete))
        {        
            <div class="mb-3">
                <InputNumber id="released" class="form-control me-2" @bind-Value="Model.Released" placeholder="Released Year"></InputNumber>
                <ValidationMessage For="@(() => Model.Released)" />
            </div>
            <div class="mb-3">
                <InputText id="lenght" class="form-control me-2" @bind-Value="Model.Lenght" placeholder="Duration"></InputText>
                <ValidationMessage For="@(() => Model.Lenght)" />
            </div>
            <InputSelect @bind-Value="Model.DirectorId" class="form-control mb-3">
                <option value=0> Select Director ...</option>
                @if(Directors != null)
                {                   
                    foreach (var director in Directors)
                    {
                        <option value="@director.Id">@director.Name</option>
                    }
                }
            </InputSelect>
            <div class="mb-3">
                <InputText id="description" class="form-control me-2" @bind-Value="Model.Description" placeholder="Description"></InputText>
                <ValidationMessage For="@(() => Model.Description)" />
            </div>
            <div class="mb-3">
                <InputText id="imageurl" class="form-control me-2" @bind-Value="Model.ImageURL" placeholder="Image Url"></InputText>
                <ValidationMessage For="@(() => Model.ImageURL)" />
            </div>
            <div class="mb-3">
                <InputText id="videoUrl" class="form-control me-2" @bind-Value="Model.VideoURL" placeholder="Video Url"></InputText>
                <ValidationMessage For="@(() => Model.VideoURL)" />
            </div>
            
        }
        
        
        <button type="submit" class="btn btn-@(Page.Equals(PageType.Delete) ? "danger" : "success") rounded-0">@Page</button>


    </EditForm>
    }
     @if (Page.Equals(PageType.AddGenre))
            {
     <EditForm Model="@Model" OnValidSubmit="@OnFormSubmit" class="mb-5 border border-1 border-secondary p-2 w-25">
        <DataAnnotationsValidator />
        <h4>@Page Films</h4>
        <div class="mb-3">
               <div class="mb-3">
                <InputText id="title2" class="form-control me-2" @bind-Value="Model.Title" disabled placeholder="Title"></InputText>
                <ValidationMessage For="@(() => Model.Title)" />
                </div>
                <InputSelect @bind-Value="selectedGenre.Id" class="form-control mb-3" placeholder="Select Genre">
                    <option value=0> Select Genre ...</option>
                    @if (Genres != null)
                    {
                        foreach (var genre in Genres)
                        {
                            <option value="@genre.Id">@genre.Name</option>
                        }
                    }            
                </InputSelect>
            
        </div>
        <button type="submit" class="btn btn-success rounded-0">@Page</button>
    </EditForm>
    }
    @if (Page.Equals(PageType.AddSimilar))
    {
        <EditForm Model="@Model" OnValidSubmit="@OnFormSubmit" class="mb-5 border border-1 border-secondary p-2 w-25">
            <DataAnnotationsValidator />
            <h4>@Page Films</h4>
            <div class="mb-3">
                <div class="mb-3">
                    <InputText id="title2" class="form-control me-2" @bind-Value="Model.Title" disabled placeholder="Title"></InputText>
                    <ValidationMessage For="@(() => Model.Title)" />
                </div>
                <InputSelect @bind-Value="selectedTitle.Id" class="form-control mb-3"  placeholder="Select Similar Film">
                    <option value=0>Select Similar Film ...</option>
                    @if (Films != null)
                    {
                        foreach (var movie in Films)
                        {
                            <option value="@movie.Id">@movie.Title</option>
                        }
                    }
                </InputSelect>

            </div>
            <button type="submit" class="btn btn-success rounded-0">@Page</button>
        </EditForm>
    }
</div>

@code {


    [Parameter] public FilmDTO Model { get; set; } = new();
    [Parameter] public string Page { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> OnChange { get; set; }
    [Parameter] public List<DirectorDTO> Directors { get; set; } = new();
    List<GenreBaseDTO> Genres { get; set; } = new();
    GenreBaseDTO selectedGenre = new();
    List<FilmDTO> Films { get; set; } = new();
    FilmDTO selectedTitle = new();

    protected override async Task OnInitializedAsync()
    {
        Directors = await AdminService.GetAsync<DirectorDTO>("Director");
        Genres = await AdminService.GetAsync<GenreBaseDTO>("Genre");
        foreach(var gen in Model.FilmGenres)
            Genres.Remove(gen);
        Films = await AdminService.GetAsync<FilmDTO>("Film");        
    }

    private async Task OnFormSubmit()
    {
        try
        {

            if (Page.Equals(PageType.Create))
                await AdminService.CreateAsync<FilmDTO>("Film", Model);
            else if (Page.Equals(PageType.Edit))
                await AdminService.EditAsync<FilmDTO>($"Film/{Model.Id}", Model);
            else if (Page.Equals(PageType.Delete))
                await AdminService.DeleteAsync<FilmDTO>($"Film/{Model.Id}");
            else if (Page.Equals(PageType.AddGenre))
            {
                FilmGenreDTO filmGenre = new FilmGenreDTO() { FilmId = Model.Id, GenreId = selectedGenre.Id };
                await AdminService.CreateAsync<FilmGenreDTO>("FilmGenre", filmGenre);            
            }
            else if (Page.Equals(PageType.AddSimilar))
            {
                SimilarFilmDTO similar = new SimilarFilmDTO() { 
                    ParentFilmId = Model.Id, SimilarFilmId = selectedTitle.Id };
                await AdminService.CreateAsync<SimilarFilmDTO>("SimilarFilm", similar);
            }

            await OnChange.InvokeAsync("");
        }
        catch
        {
            await OnChange.InvokeAsync($"Couldn't create/edit/delete the entry of type Film!");
        }
    }
    
    


}
